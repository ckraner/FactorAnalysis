sprinkle(cols = 3, halign="center") %>%
sprinkle(rows=nvar,border="bottom",border_thickness=.5)%>%
sprinkle_colnames(term = "Term", p.value = "P-value",
std.error = "SE", statistic = "T-statistic",
estimate = "Coefficient")%>%
sprinkle(rows=1,sanitize=TRUE,border=c("top","bottom"),border_thickness=.5, part="head")
testdust$head[,6]=testdust$head[,1]
testdust$head
testdust$head[6,]=testdust$head[,1]
testdust$head[6,]=testdust$head[1,]
testdust$head
testdust=dust(PCreg5, float=FALSE, hhline=TRUE) %>%
sprinkle(cols=c("estimate","std.error","statistic"),round=2) %>%
sprinkle(cols="p.value",fn=quote(pvalString(value))) %>%
sprinkle(sanitize=TRUE) %>%
sprinkle(cols = c(2,4), halign="center", border=c("left","right"), border_thickness=.5)%>%
sprinkle(cols = 3, halign="center") %>%
sprinkle(rows=nvar,border="bottom",border_thickness=.5)%>%
sprinkle_colnames(term = "Term", p.value = "P-value",
std.error = "SE", statistic = "T-statistic",
estimate = "Coefficient")%>%
sprinkle(rows=1,sanitize=TRUE,border=c("top","bottom"),border_thickness=.5, part="head")
?round
?trimws
testdust=dust(PCreg5, float=FALSE, hhline=TRUE) %>%
sprinkle(cols=c("estimate","std.error","statistic"),round=2) %>%
sprinkle(cols="p.value",fn=quote(pvalString(value))) %>%
sprinkle(sanitize=TRUE) %>%
sprinkle(cols = c(2,4), halign="center", border=c("left","right"), border_thickness=.5)%>%
sprinkle(cols = 3, halign="center") %>%
sprinkle(rows=nvar,border="bottom",border_thickness=.5)%>%
sprinkle_colnames(term = "Term", p.value = "P-value",
std.error = "SE", statistic = "T-statistic",
estimate = "Coefficient")%>%
sprinkle(rows=1,sanitize=TRUE,border=c("top","bottom"),border_thickness=.5, part="head") %>%
tidy_levels_labels(descriptors="label")
library(pixiedust)
options(pixiedust_print_method = "latex")
testdust=dust(PCreg5, float=FALSE, hhline=TRUE) %>%
sprinkle(cols=c("estimate","std.error","statistic"),round=2) %>%
sprinkle(cols="p.value",fn=quote(pvalString(value))) %>%
sprinkle(sanitize=TRUE) %>%
sprinkle(cols = c(2,4), halign="center", border=c("left","right"), border_thickness=.5)%>%
sprinkle(cols = 3, halign="center") %>%
sprinkle(rows=nvar,border="bottom",border_thickness=.5)%>%
sprinkle_colnames(term = "Term", p.value = "P-value",
std.error = "SE", statistic = "T-statistic",
estimate = "Coefficient")%>%
sprinkle(rows=1,sanitize=TRUE,border=c("top","bottom"),border_thickness=.5, part="head") %>%
tidy_levels_labels(descriptors="label")
\documentclass{article}
install.packages(knitr)
options(pixiedust_print_method = "html")
dust(fit, float=FALSE, hhline=TRUE) %>%
sprinkle(cols = "term",
replace = c("Intercept", "Quarter Mile Time", "Automatic vs. Manual",
"Weight", "Gears: 4 vs. 3", "Gears: 5 vs 3")) %>%
sprinkle(cols=c("estimate","std.error","statistic"),round=2) %>%
sprinkle(cols="p.value",fn=quote(pvalString(value))) %>%
sprinkle(sanitize=TRUE) %>%
sprinkle(cols = c(2,4), halign="center", border=c("left","right"), border_thickness=.5)%>%
sprinkle(cols = 3, halign="center") %>%
sprinkle(rows=nvar,border="bottom",border_thickness=.5)%>%
sprinkle_colnames(term = "Term", p.value = "P-value",
std.error = "SE", statistic = "T-statistic",
estimate = "Coefficient")%>%
sprinkle(rows=1,sanitize=TRUE,border=c("top","bottom"),border_thickness=.5,part="head")
library(pixiedust)
options(pixiedust_print_method = "html")
testdust=dust(PCreg5, float=FALSE, hhline=TRUE) %>%
sprinkle(cols=c("estimate","std.error","statistic"),round=2) %>%
sprinkle(cols="p.value",fn=quote(pvalString(value))) %>%
sprinkle(sanitize=TRUE) %>%
sprinkle(cols = c(2,4), halign="center", border=c("left","right"), border_thickness=.5)%>%
sprinkle(cols = 3, halign="center") %>%
sprinkle(rows=nvar,border="bottom",border_thickness=.5)%>%
sprinkle_colnames(term = "Term", p.value = "P-value",
std.error = "SE", statistic = "T-statistic",
estimate = "Coefficient")%>%
sprinkle(rows=1,sanitize=TRUE,border=c("top","bottom"),border_thickness=.5, part="head")
print(testdust)
options(pixiedust_print_method = "console")
testdust=dust(PCreg5, float=FALSE, hhline=TRUE) %>%
sprinkle(cols=c("estimate","std.error","statistic"),round=2) %>%
sprinkle(cols="p.value",fn=quote(pvalString(value))) %>%
sprinkle(sanitize=TRUE) %>%
sprinkle(cols = c(2,4), halign="center", border=c("left","right"), border_thickness=.5)%>%
sprinkle(cols = 3, halign="center") %>%
sprinkle(rows=nvar,border="bottom",border_thickness=.5)%>%
sprinkle_colnames(term = "Term", p.value = "P-value",
std.error = "SE", statistic = "T-statistic",
estimate = "Coefficient")%>%
sprinkle(rows=1,sanitize=TRUE,border=c("top","bottom"),border_thickness=.5, part="head")
print(testdust)
library(gWidgets)
install.packages("gWidgets")
library(gWidgets)
install.packages("gWidgets2tcltk")
library(gWidgetstcltk)
library(gWidgets2)
library(gWidgets2tcltk)
grp_name= ggroup(container=win)
win=gwindow("Example")
grp_name= ggroup(container=win)
lbl_data_frame_name=glabel("Variable to save data to: ", container=grp_name)
txt_dat_frame_name=gedit("dfr",container=grp_name)
grp_upload=ggroup(container=win)
use_comma_for_decimal <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = use_comma_for_decimal(),
container = grp_upload
)
status_bar <- gstatusbar("", container = win)
function(h, ...)
{
gfile(
text    = "Upload tab delimited file",
type    = "open",
action  = ifelse(svalue(chk_eurostyle), "read.delim2", "read.delim"),
handler = function(h, ...)
{
tryCatch(
{
data_frame_name <- make.names(svalue(txt_data_frame_name))
the_data <- do.call(h$action, list(h$file))
assign(data_frame_name, the_data, envir = globalenv())
svalue(status_bar) <-
paste(nrow(the_data), "records saved to variable", data_frame_name)
},
error = function(e) svalue(status_bar) <- "Could not upload data"
)
},
filter = list(
"Tab delimited" = list(patterns = c("*.txt","*.dlm","*.tab")),
"All files" = list(patterns = c("*"))
)
)
}
win
win
win=gwindow("Example")
grp_name= ggroup(container=win)
lbl_data_frame_name=glabel("Variable to save data to: ", container=grp_name)
txt_dat_frame_name=gedit("dfr",container=grp_name)
grp_upload=ggroup(container=win)
use_comma_for_decimal <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = use_comma_for_decimal(),
container = grp_upload
)
status_bar <- gstatusbar("", container = win)
function(h, ...)
{
gfile(
text    = "Upload tab delimited file",
type    = "open",
action  = ifelse(svalue(chk_eurostyle), "read.delim2", "read.delim"),
handler = function(h, ...)
{
tryCatch(
{
data_frame_name <- make.names(svalue(txt_data_frame_name))
the_data <- do.call(h$action, list(h$file))
assign(data_frame_name, the_data, envir = globalenv())
svalue(status_bar) <-
paste(nrow(the_data), "records saved to variable", data_frame_name)
},
error = function(e) svalue(status_bar) <- "Could not upload data"
)
},
filter = list(
"Tab delimited" = list(patterns = c("*.txt","*.dlm","*.tab")),
"All files" = list(patterns = c("*"))
)
)
}
if(interactive()) {
## An example of using some controls to modify which rows are displayed using visible<-
X <- mtcars
## Layout
w <- gwindow()
g <- gvbox(cont=w)
d <- gdf(X, cont=g)
b <- ggroup(cont=g)
nms <- names(X)
combo <- gcombobox(nms, cont=b)
glabel("==", cont=b)                    # could easily generalize
val <- gedit("", cont=b)
## Handlers.
## if entry widget is non-empty, find matches to display within selected variable
addHandlerChanged(val, handler=function(h,...) {
if (svalue(combo, index=TRUE) < 1)
return()
value <- svalue(val)
if(nchar(value) == 0)
return()
var <- X[[svalue(combo)]]
ind <- var == value
visible(d) <- ind
})
## if a new variable is changed, update the dropdown list and
## reset value
addHandlerChanged(combo, handler=function(h,...) {
vars <- sort(unique(X[[svalue(combo)]]))
val[] <- vars
svalue(val) == ""
})
}
if(interactive()) {
## An example of using some controls to modify which rows are displayed using visible<-
X <- mtcars
## Layout
w <- gwindow()
g <- gvbox(cont=w)
d <- gdf(X, cont=g)
b <- ggroup(cont=g)
nms <- names(X)
combo <- gcombobox(nms, cont=b)
glabel("==", cont=b)                    # could easily generalize
val <- gedit("", cont=b)
## Handlers.
## if entry widget is non-empty, find matches to display within selected variable
addHandlerChanged(val, handler=function(h,...) {
if (svalue(combo, index=TRUE) < 1)
return()
value <- svalue(val)
if(nchar(value) == 0)
return()
var <- X[[svalue(combo)]]
ind <- var == value
visible(d) <- ind
})
## if a new variable is changed, update the dropdown list and
## reset value
addHandlerChanged(combo, handler=function(h,...) {
vars <- sort(unique(X[[svalue(combo)]]))
val[] <- vars
svalue(val) == ""
})
}
if(interactive()) {
w <- gwindow("Selection widgets")
g <- gvbox(cont=w)
fl <- gformlayout(cont=g)
gcheckbox("checkbox", checked=TRUE, cont=fl, label="checkbox")
gradio(state.name[1:4], selected=2, horizontal=TRUE, cont=fl, label="gradio")
gcheckboxgroup(state.name[1:4], horizontal=FALSE, cont=fl, label="checkbox group")
bg <- ggroup(cont=g)
gbutton("ok", cont=bg, handler=function(h,...) print(sapply(fl$children, svalue)))
}
win=gwindow("Example")
grp_name= ggroup(container=win)
lbl_data_frame_name=glabel("Variable to save data to: ", container=grp_name)
txt_dat_frame_name=gedit("dfr",container=grp_name)
grp_upload=ggroup(container=win)
use_comma_for_decimal <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = use_comma_for_decimal(),
container = grp_upload
)
status_bar <- gstatusbar("", container = win)
function(h, ...)
{
gfile(
text    = "Upload tab delimited file",
type    = "open",
action  = ifelse(svalue(chk_eurostyle), "read.delim2", "read.delim"),
handler = function(h, ...)
{
tryCatch(
{
data_frame_name <- make.names(svalue(txt_data_frame_name))
the_data <- do.call(h$action, list(h$file))
assign(data_frame_name, the_data, envir = globalenv())
svalue(status_bar) <-
paste(nrow(the_data), "records saved to variable", data_frame_name)
},
error = function(e) svalue(status_bar) <- "Could not upload data"
)
},
filter = list(
"Tab delimited" = list(patterns = c("*.txt","*.dlm","*.tab")),
"All files" = list(patterns = c("*"))
)
)
}
if(interactive()) {
w <- gwindow("Selection widgets")
g <- gvbox(cont=w)
fl <- gformlayout(cont=g)
gcheckbox("checkbox", checked=TRUE, cont=fl, label="checkbox")
gradio(state.name[1:4], selected=2, horizontal=TRUE, cont=fl, label="gradio")
gcheckboxgroup(state.name[1:4], horizontal=FALSE, cont=fl, label="checkbox group")
bg <- ggroup(cont=g)
gbutton("ok", cont=bg, handler=function(h,...) print(sapply(fl$children, svalue)))
}
fl$children
fl$children$checkbox
fl$children$checkbox$get_value()
t=if(interactive()) {
w <- gwindow("Selection widgets")
g <- gvbox(cont=w)
fl <- gformlayout(cont=g)
gcheckbox("checkbox", checked=TRUE, cont=fl, label="checkbox")
gradio(state.name[1:4], selected=2, horizontal=TRUE, cont=fl, label="gradio")
gcheckboxgroup(state.name[1:4], horizontal=FALSE, cont=fl, label="checkbox group")
bg <- ggroup(cont=g)
gbutton("ok", cont=bg, handler=function(h,...) print(sapply(fl$children, svalue)))
}
t
t
t1=function(){if(interactive()) {
w <- gwindow("Selection widgets")
g <- gvbox(cont=w)
fl <- gformlayout(cont=g)
gcheckbox("checkbox", checked=TRUE, cont=fl, label="checkbox")
gradio(state.name[1:4], selected=2, horizontal=TRUE, cont=fl, label="gradio")
gcheckboxgroup(state.name[1:4], horizontal=FALSE, cont=fl, label="checkbox group")
bg <- ggroup(cont=g)
gbutton("ok", cont=bg, handler=function(h,...) print(sapply(fl$children, svalue)))
}
}
t1
t1
t1={if(interactive()) {
w <- gwindow("Selection widgets")
g <- gvbox(cont=w)
fl <- gformlayout(cont=g)
gcheckbox("checkbox", checked=TRUE, cont=fl, label="checkbox")
gradio(state.name[1:4], selected=2, horizontal=TRUE, cont=fl, label="gradio")
gcheckboxgroup(state.name[1:4], horizontal=FALSE, cont=fl, label="checkbox group")
bg <- ggroup(cont=g)
gbutton("ok", cont=bg, handler=function(h,...) print(sapply(fl$children, svalue)))
}
}
t1
show(t1)
t1$widget
t1$initialize()
t1$initialize(w)
t1$initialize(container=w)
t1$initialize(container=win)
testwin=gwindow()
t1$initialize(container=testwin)
t1$`initialize#GWidget`()
t1$show()
visible(t1)=TRUE
install.packages("Rcmdr")
library(Rcmdr)
t1
t
w
e
w
view(2)
view(w)
show(w)
initialize(w)
initialize(t1)
t1={if(interactive()) {
w <- gwindow("Selection widgets")
g <- gvbox(cont=w)
fl <- gformlayout(cont=g)
gcheckbox("checkbox", checked=TRUE, cont=fl, label="checkbox")
gradio(state.name[1:4], selected=2, horizontal=TRUE, cont=fl, label="gradio")
gcheckboxgroup(state.name[1:4], horizontal=FALSE, cont=fl, label="checkbox group")
bg <- ggroup(cont=g)
gbutton("ok", cont=bg, handler=function(h,...) print(sapply(fl$children, svalue)))
}
}
initialize(t1)
initialize(w)
t2=if(interactive()) {
## An example of using some controls to modify which rows are displayed using visible<-
X <- mtcars
## Layout
w <- gwindow()
g <- gvbox(cont=w)
d <- gdf(X, cont=g)
b <- ggroup(cont=g)
nms <- names(X)
combo <- gcombobox(nms, cont=b)
glabel("==", cont=b)                    # could easily generalize
val <- gedit("", cont=b)
## Handlers.
## if entry widget is non-empty, find matches to display within selected variable
addHandlerChanged(val, handler=function(h,...) {
if (svalue(combo, index=TRUE) < 1)
return()
value <- svalue(val)
if(nchar(value) == 0)
return()
var <- X[[svalue(combo)]]
ind <- var == value
visible(d) <- ind
})
## if a new variable is changed, update the dropdown list and
## reset value
addHandlerChanged(combo, handler=function(h,...) {
vars <- sort(unique(X[[svalue(combo)]]))
val[] <- vars
svalue(val) == ""
})
}
initialize(t2)
initialize(t1, container=gwindow(title="Window"))
GWIdget(t1)
get.Widget
t2=if(interactive()) {
## An example of using some controls to modify which rows are displayed using visible<-
X <- mtcars
## Layout
w <- gwindow()
g <- gvbox(cont=w)
d <- gdf(X, cont=g)
b <- ggroup(cont=g)
nms <- names(X)
combo <- gcombobox(nms, cont=b)
glabel("==", cont=b)                    # could easily generalize
val <- gedit("", cont=b)
## Handlers.
## if entry widget is non-empty, find matches to display within selected variable
addHandlerChanged(val, handler=function(h,...) {
if (svalue(combo, index=TRUE) < 1)
return()
value <- svalue(val)
if(nchar(value) == 0)
return()
var <- X[[svalue(combo)]]
ind <- var == value
visible(d) <- ind
})
## if a new variable is changed, update the dropdown list and
## reset value
addHandlerChanged(combo, handler=function(h,...) {
vars <- sort(unique(X[[svalue(combo)]]))
val[] <- vars
svalue(val) == ""
})
}
demo(gwidgets2)
demo(gWidgets2)
demo(gWidgets2tcltk)
?gWidgets2
??gWidgets2
isExtant(t1)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
install.packages("Rcpp")
devtools::install_github("klutometis/roxygen")
install.packages("digest")
devtools::install_github("klutometis/roxygen")
getwd("parent_directory")
setwd("parent_directory")
setwd("C:\R Packages")
setwd("C:/R Packages")
getwd()
create("Factor Analysis")
library(roxygen2)
create("Factor Analysis")
library(devtools)
create("Factor Analysis")
create("FactorAnalysis")
setwd("./FactorAnalysis")
document()
install.packages("crayon")
document()
setwd("..")
install("FactorAnalyis")
install("FactorAnalyis")
install("C:\R Packages\FactorAnalysis")
install("C:/R Packages/FactorAnalysis")
FactorAnalysis::calcpchisq()
??calcpchisq
abs()
abs(-5)
setwd("./FactorAnalysis")
document()
setwd("..")
install("C:/R Packages/FactorAnalysis")
??matrixification
??calcpchisq
setwd("./FactorAnalysis")
document()
install("C:/R Packages/FactorAnalysis")
document()
install("C:/R Packages/FactorAnalysis")
document()
document()
install("C:/R Packages/FactorAnalysis")
??calcpchisq
document()
document()
document()
document()
document()
install("C:/R Packages/FactorAnalysis")
